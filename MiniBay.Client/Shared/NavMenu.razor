<nav class="mini-navbar">
    <!-- NUEVO: Overlay para cerrar el menú de usuario al hacer clic fuera -->
    @if (isUserMenuVisible)
    {
        <div class="overlay" @onclick="CloseUserMenu"></div>
    }

    <div class="navbar-container">

        <div class="logo">
            <a href="/">
                <i class="fa-solid fa-bag-shopping"></i>
                <span class="logo-text">MiniBay</span>
            </a>
        </div>

        <!-- El contenedor del menú ahora usa una clase condicional de Blazor -->
        <div class="nav-links-container @(isMobileMenuVisible ? "active" : "")">
            <ul class="main-menu">
                <li><a href="/"><i class="fa-solid fa-house"></i><span>Inicio</span></a></li>
                <li><a href="/about"><i class="fa-solid fa-users"></i><span>Nosotros</span></a></li>
                <li><a href="/contact"><i class="fa-solid fa-envelope"></i><span>Contacto</span></a></li>
            </ul>
        </div>

        <div class="nav-actions">
            <form class="search-form">
                <input type="search" placeholder="Buscar..." />
                <button type="submit" aria-label="Buscar"><i class="fa-solid fa-magnifying-glass"></i></button>
            </form>

            <a href="/upload" class="btn-action"><i class="fa-solid fa-cloud-arrow-up"></i></a>
            
            <a href="/cart" class="btn-action cart-btn">
                <i class="fa-solid fa-cart-shopping"></i>
                <span class="badge">0</span>
            </a>

            <button @onclick="ToggleDarkMode" class="btn-action theme-toggle" aria-label="Cambiar tema">
                <i class="fa-solid fa-moon"></i>
                <i class="fa-solid fa-sun"></i>
            </button>
            
            <!-- Menú de Usuario con lógica Blazor -->
            <div class="user-menu-container">
                <!-- @onclick llama a nuestro método C# -->
                <!-- @onclick:stopPropagation evita que el clic en el botón cierre el menú inmediatamente -->
                <button class="btn-action user-avatar-btn" @onclick="ToggleUserMenu" @onclick:stopPropagation="true">
                    <i class="fa-solid fa-user-circle"></i>
                </button>
                
                <!-- El menú desplegable usa una clase condicional -->
                <div class="user-dropdown-menu @(isUserMenuVisible ? "show" : "")" @onclick:stopPropagation="true">
                    <a href="/logout">Cerrar Sesión</a>
                </div>
            </div>
        </div>
        
        <!-- El botón de hamburguesa ahora usa @onclick -->
        <button class="menu-toggler" @onclick="ToggleMobileMenu" aria-label="Abrir menú">
            <!-- El icono cambia dinámicamente según el estado -->
            <i class="@(isMobileMenuVisible ? "fa-solid fa-times" : "fa-solid fa-bars")"></i>
        </button>

    </div>
</nav>

@code {
    [Parameter]
    public EventCallback ToggleDarkMode { get; set; }

    // Estado para controlar la visibilidad del menú móvil
    private bool isMobileMenuVisible = false;

    // Estado para controlar la visibilidad del menú de usuario
    private bool isUserMenuVisible = false;

    /// <summary>
    /// Cambia la visibilidad del menú de navegación en móviles.
    /// </summary>
    private void ToggleMobileMenu()
    {
        isMobileMenuVisible = !isMobileMenuVisible;
        // Si abrimos el menú móvil, nos aseguramos de que el de usuario esté cerrado.
        if (isMobileMenuVisible)
        {
            isUserMenuVisible = false;
        }
    }

    /// <summary>
    /// Cambia la visibilidad del menú desplegable del usuario.
    /// </summary>
    private void ToggleUserMenu()
    {
        isUserMenuVisible = !isUserMenuVisible;
        // Si abrimos el menú de usuario, nos aseguramos de que el móvil esté cerrado.
        if (isUserMenuVisible)
        {
            isMobileMenuVisible = false;
        }
    }

    /// <summary>
    /// Cierra el menú de usuario (usado por el overlay).
    /// </summary>
    private void CloseUserMenu()
    {
        isUserMenuVisible = false;
    }
}