@implements IDisposable
@using MiniBay.Client.Services
@inject CartService cartService

<nav class="mini-navbar">
    @if (isUserMenuVisible)
    {
        <div class="overlay" @onclick="CloseUserMenu"></div>
    }

    <div class="navbar-container">

        <div class="logo">
            <a href="/">
                <i class="fa-solid fa-bag-shopping"></i>
                <span class="logo-text">MiniBay</span>
            </a>
        </div>

        <div class="nav-links-container @(isMobileMenuVisible ? "active" : "")">
            <ul class="main-menu">
                <li><a href="/"><i class="fa-solid fa-house"></i><span>Inicio</span></a></li>
                <li><a href="/about"><i class="fa-solid fa-users"></i><span>Nosotros</span></a></li>
                <li><a href="/contact"><i class="fa-solid fa-envelope"></i><span>Contacto</span></a></li>
            </ul>
        </div>

        <div class="nav-actions">
            <form class="search-form">
                <input type="search" placeholder="Buscar..." />
                <button type="submit" aria-label="Buscar"><i class="fa-solid fa-magnifying-glass"></i></button>
            </form>

            <AuthorizeView>

                <Authorized>
                    <a href="/upload" class="btn-action"><i class="fa-solid fa-cloud-arrow-up"></i></a>

                    <a href="/cart" class="btn-action cart-btn">
                        <i class="fa-solid fa-cart-shopping"></i>
                        <span class="badge">@cartItemCount</span>
                    </a>

                    <button @onclick="ToggleDarkMode" class="btn-action theme-toggle" aria-label="Cambiar tema">
                        <i class="fa-solid fa-moon"></i>
                        <i class="fa-solid fa-sun"></i>
                    </button>

                    <div class="user-menu-container">
                        <button class="btn-action user-avatar-btn" @onclick="ToggleUserMenu" @onclick:stopPropagation="true">
                            <i class="fa-solid fa-user-circle"></i>
                        </button>

                        <div class="user-dropdown-menu @(isUserMenuVisible ? "show" : "")" @onclick:stopPropagation="true">
                            <div class="user-info">Hola, @context.User.Identity?.Name</div>
                            <a href="/logout">Cerrar Sesión</a>
                        </div>
                    </div>
                </Authorized>

                <NotAuthorized>
                    <button @onclick="ToggleDarkMode" class="btn-action theme-toggle" aria-label="Cambiar tema">
                        <i class="fa-solid fa-moon"></i>
                        <i class="fa-solid fa-sun"></i>
                    </button>

                    <a href="/login" class="btn-action">
                        <i class="fa-solid fa-sign-in-alt"></i>
                        <span>Iniciar Sesión</span>
                    </a>
                </NotAuthorized>

            </AuthorizeView>

        </div>

        <button class="menu-toggler" @onclick="ToggleMobileMenu" aria-label="Abrir menú">
            <i class="@(isMobileMenuVisible ? "fa-solid fa-times" : "fa-solid fa-bars")"></i>
        </button>

    </div>
</nav>

@code {
    [Parameter]
    public EventCallback ToggleDarkMode { get; set; }

    private bool isMobileMenuVisible = false;
    private bool isUserMenuVisible = false;

    private int cartItemCount = 0;

    protected override async Task OnInitializedAsync()
    {
        cartItemCount = await GetCartCount();
        cartService.OnChange += OnCartChanged;
    }

    private async void OnCartChanged()
    {
        cartItemCount = await GetCartCount();
        await InvokeAsync(StateHasChanged);
    }

    private async Task<int> GetCartCount()
    {
        var cartItems = await cartService.GetCartItemsAsync();
        return cartItems.Sum(item => item.Quantity);
    }

    public void Dispose()
    {
        cartService.OnChange -= OnCartChanged;
    }

    private void ToggleMobileMenu()
    {
        isMobileMenuVisible = !isMobileMenuVisible;
        if (isMobileMenuVisible)
        {
            isUserMenuVisible = false;
        }
    }

    private void ToggleUserMenu()
    {
        isUserMenuVisible = !isUserMenuVisible;
        if (isUserMenuVisible)
        {
            isMobileMenuVisible = false;
        }
    }

    private void CloseUserMenu()
    {
        isUserMenuVisible = false;
    }
}