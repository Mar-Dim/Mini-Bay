@using System.ComponentModel.DataAnnotations

<div class="modal fade @animationClass"
     style="display: @((_internalVisible || isClosing) ? "block" : "none"); background-color: rgba(0,0,0,0.5);"
     tabindex="-1"
     aria-hidden="@(!_internalVisible)">

    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content @animationClass">
            <div class="modal-header">
                <h5 class="modal-title">Confirmar Pago</h5>
                <button type="button" class="btn-close" @onclick="StartCloseAnimation" disabled="@isClosing"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="paymentDetails" OnValidSubmit="HandlePaymentSubmit">
                    <DataAnnotationsValidator />

                    <p>Total a Pagar: <strong>@TotalAmount.ToString("C")</strong></p>
                    <hr />

                    <div class="mb-3">
                        <label class="form-label">Método de Pago</label>
                        <InputSelect @bind-Value="paymentDetails.PaymentMethod" class="form-select">
                            <option value="">Seleccione...</option>
                            <option value="Tarjeta">Tarjeta de Crédito/Débito</option>
                            <option value="Transferencia">Transferencia Bancaria</option>
                            <option value="Efectivo">Efectivo (Contra Entrega)</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => paymentDetails.PaymentMethod)" class="validation-message" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Nombre para Factura</label>
                        <InputText @bind-Value="paymentDetails.BillingName" class="form-control" />
                        <ValidationMessage For="@(() => paymentDetails.BillingName)" class="validation-message" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Cédula/RUC para Factura</label>
                        <InputText @bind-Value="paymentDetails.BillingId" class="form-control" />
                        <ValidationMessage For="@(() => paymentDetails.BillingId)" class="validation-message" />
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="StartCloseAnimation" disabled="@isClosing">Cancelar</button>
                        <button type="submit" class="btn btn-primary" disabled="@isClosing">Confirmar Pago</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public decimal TotalAmount { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<PaymentDetails> OnPaymentConfirmed { get; set; }

    private PaymentDetails paymentDetails = new();
    private bool isClosing = false;
    private bool _internalVisible = false;
    private string animationClass = "";

    protected override async Task OnParametersSetAsync()
    {
        if (IsVisible && !_internalVisible)
        {
            _internalVisible = true;
            isClosing = false;
            animationClass = "";
            await InvokeAsync(StateHasChanged);

            await Task.Delay(10);

            animationClass = "show";
            await InvokeAsync(StateHasChanged);
        }
        else if (!IsVisible && _internalVisible)
        {
            _internalVisible = false;
            isClosing = false;
            animationClass = "";
        }
    }

    private async Task StartCloseAnimation()
    {
        if (isClosing || !_internalVisible) return;

        isClosing = true;
        animationClass = "hide";
        await InvokeAsync(StateHasChanged);

        await Task.Delay(350);

        paymentDetails = new();
        _internalVisible = false;
        animationClass = "";
        await OnClose.InvokeAsync();
        isClosing = false;
    }


    private Task HandlePaymentSubmit()
    {
        if (isClosing) return Task.CompletedTask;
        return OnPaymentConfirmed.InvokeAsync(paymentDetails);
    }

    public class PaymentDetails
    {
        [Required(ErrorMessage = "Seleccione un método de pago.")]
        public string PaymentMethod { get; set; } = string.Empty;

        [Required(ErrorMessage = "Ingrese el nombre para la factura.")]
        public string BillingName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Ingrese la cédula o RUC.")]
        public string BillingId { get; set; } = string.Empty;
    }
}