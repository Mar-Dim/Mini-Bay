@page "/register"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject LocalStorageService LocalStorage
@using System.ComponentModel.DataAnnotations
<div class="login-container">
    <div class="login-card">
        <div class="login-header">
            <i class="fa-solid fa-user-plus"></i>
            <h2>Crear Cuenta</h2>
            <p>Únete a la comunidad de MiniBay para empezar a vender y comprar.</p>
        </div>
<EditForm Model="@registerModel" OnValidSubmit="HandleRegisterAsync" class="login-form">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label for="username">Nombre de Usuario</label>
            <InputText id="username" class="form-control" @bind-Value="registerModel.Username" placeholder="Tu nombre de usuario" />
            <ValidationMessage For="@(() => registerModel.Username)" />
        </div>

        <div class="form-group">
            <label for="email">Correo Electrónico</label>
            <InputText id="email" class="form-control" @bind-Value="registerModel.Email" placeholder="tu@email.com" />
            <ValidationMessage For="@(() => registerModel.Email)" />
        </div>

        <div class="form-group">
            <label for="password">Contraseña</label>
            <InputText id="password" type="password" class="form-control" @bind-Value="registerModel.Password" placeholder="Mínimo 6 caracteres" />
            <ValidationMessage For="@(() => registerModel.Password)" />
        </div>

        <div class="form-group">
            <label for="confirmPassword">Confirmar Contraseña</label>
            <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="registerModel.ConfirmPassword" placeholder="Repite tu contraseña" />
            <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-error">@errorMessage</div>
        }

        <button type="submit" class="btn-login" disabled="@isLoading">
            @if (isLoading)
            {
                <span class="spinner"></span>
                <span>Creando cuenta...</span>
            }
            else
            {
                <span>Registrarse</span>
            }
        </button>
    </EditForm>

    <div class="login-footer">
        <span>¿Ya tienes una cuenta? <a href="/login">Inicia sesión aquí</a></span>
    </div>
</div>
</div>
@code {
private RegisterModel registerModel = new();
private bool isLoading = false;
private string? errorMessage;
private async Task HandleRegisterAsync()
{
    isLoading = true;
    errorMessage = null;
    StateHasChanged();

    try
    {
        // Llama al endpoint de registro de tu API
        var response = await Http.PostAsJsonAsync("api/auth/register", registerModel);

        if (response.IsSuccessStatusCode)
        {
            // Si el registro es exitoso, la API devuelve un token para iniciar sesión automáticamente
            var result = await response.Content.ReadFromJsonAsync<LoginResult>();
            if (result?.Token != null)
            {
                // Guarda el token en el almacenamiento local
                await LocalStorage.SetItemAsync("authToken", result.Token);

                // Notifica a Blazor que el usuario está ahora autenticado
                ((JwtAuthStateProvider)AuthStateProvider).NotifyUserAuthentication(result.Token);

                // Redirige a la página principal
                Navigation.NavigateTo("/");
            }
            else
            {
                errorMessage = "Registro exitoso, pero no se pudo iniciar sesión automáticamente.";
            }
        }
        else
        {
            // Muestra el error devuelto por la API (ej: "El usuario ya existe")
            errorMessage = await response.Content.ReadAsStringAsync();
        }
    }
    catch (Exception)
    {
        errorMessage = "Error de conexión. No se pudo completar el registro.";
    }
    finally
    {
        isLoading = false;
        StateHasChanged();
    }
}

// Modelo de datos para el formulario de registro con validaciones
public class RegisterModel
{
    [Required(ErrorMessage = "El nombre de usuario es obligatorio.")]
    [StringLength(20, ErrorMessage = "El nombre de usuario no puede tener más de 20 caracteres.")]
    public string Username { get; set; } = string.Empty;

    [Required(ErrorMessage = "El correo es obligatorio.")]
    [EmailAddress(ErrorMessage = "El formato del correo no es válido.")]
    public string Email { get; set; } = string.Empty;

    [Required(ErrorMessage = "La contraseña es obligatoria.")]
    [StringLength(100, MinimumLength = 6, ErrorMessage = "La contraseña debe tener al menos 6 caracteres.")]
    public string Password { get; set; } = string.Empty;

    [Required(ErrorMessage = "Debes confirmar la contraseña.")]
    [Compare(nameof(Password), ErrorMessage = "Las contraseñas no coinciden.")]
    public string ConfirmPassword { get; set; } = string.Empty;
}

// Se puede reutilizar la misma clase de resultado que en el login
public class LoginResult
{
    public string? Token { get; set; }
}}