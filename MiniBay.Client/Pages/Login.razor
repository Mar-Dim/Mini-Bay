@page "/login"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject LocalStorageService LocalStorage
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization


<div class="login-container">
    <div class="login-card">
        <div class="login-header">
            <i class="fa-solid fa-right-to-bracket"></i>
            <h2>Iniciar Sesión</h2>
            <p>Bienvenido de nuevo a MiniBay</p>
        </div>

        <EditForm Model="@loginModel" OnValidSubmit="HandleLoginAsync" class="login-form">
            <DataAnnotationsValidator />

            <div class="form-group">
                <label for="email">Correo Electrónico</label>
                <InputText id="email" class="form-control" @bind-Value="loginModel.Email" placeholder="tu@email.com" />
                <ValidationMessage For="@(() => loginModel.Email)" />
            </div>

            <div class="form-group">
                <label for="password">Contraseña</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" placeholder="••••••••" />
                <ValidationMessage For="@(() => loginModel.Password)" />
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-error">@errorMessage</div>
            }

            <button type="submit" class="btn-login" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner"></span>
                    <span>Ingresando...</span>
                }
                else
                {
                    <span>Ingresar</span>
                }
            </button>
        </EditForm>

        <div class="login-footer">
            <span>¿No tienes una cuenta? <a href="/register">Regístrate aquí</a></span>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private bool isLoading = false;
    private string? errorMessage;

    private async Task HandleLoginAsync()
    {
        isLoading = true;
        errorMessage = null;
        StateHasChanged(); // Actualiza la UI para mostrar el spinner

        try
        {
            // Realiza la llamada POST a tu API con el modelo de login
            var response = await Http.PostAsJsonAsync("api/auth/login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                // Deserializa la respuesta para obtener el token
                var result = await response.Content.ReadFromJsonAsync<LoginResult>();
                if (result?.Token != null)
                {
                    // Guarda el token JWT en el almacenamiento local del navegador
                    await LocalStorage.SetItemAsync("authToken", result.Token);

                    // Notifica al sistema de autenticación de Blazor que el usuario ha iniciado sesión
                    // Esto actualizará el estado en toda la aplicación
                    ((JwtAuthStateProvider)AuthStateProvider).NotifyUserAuthentication(result.Token);

                    // Redirige al usuario a la página de inicio
                    Navigation.NavigateTo("/");
                }
                else
                {
                    errorMessage = "No se recibió un token de autenticación válido.";
                }
            }
            else
            {
                // Si el login falla (ej. credenciales incorrectas), muestra el mensaje de error de la API
                errorMessage = await response.Content.ReadAsStringAsync();
            }
        }
        catch (HttpRequestException)
        {
            // Captura errores específicos de red
            errorMessage = "No se pudo conectar con el servidor. Por favor, revisa tu conexión a internet.";
        }
        catch (Exception ex)
        {
            // Captura cualquier otro error inesperado
            errorMessage = "Ha ocurrido un error inesperado. Por favor, intenta de nuevo.";
            Console.WriteLine($"Error en login: {ex.Message}"); // Log para depuración
        }
        finally
        {
            isLoading = false;
            StateHasChanged(); // Vuelve a actualizar la UI para ocultar el spinner
        }
    }

    // Modelo de datos para el formulario de login (podría estar en MiniBay.Shared)
    public class LoginModel
    {
        [Required(ErrorMessage = "El correo es obligatorio.")]
        [EmailAddress(ErrorMessage = "El formato del correo no es válido.")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "La contraseña es obligatoria.")]
        public string Password { get; set; } = string.Empty;
    }

    // Clase para deserializar la respuesta del token desde la API
    public class LoginResult
    {
        public string? Token { get; set; }
    }
}