@page "/product/{Id:int}"

@using MiniBay.Client.Services
@inject CartService cartService
@inject NavigationManager Navigation

@inject HttpClient Http
@using MiniBay.Application.DTO
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]


@if (isLoading)
{
    <div class="text-center mt-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Cargando...</span>
        </div>
        <p class="mt-2">Cargando detalles del producto...</p>
    </div>
}
else if (product is null)
{
    <div class="alert alert-warning text-center mt-5" role="alert">
        <h4 class="alert-heading">Producto no encontrado</h4>
        <p>El producto que buscas no existe o fue removido. Por favor, verifica la URL o vuelve al catálogo.</p>
        <hr>
        <a href="/products" class="btn btn-secondary">Volver al catálogo</a>
    </div>
}
else
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-md-6 text-center">
                <img src="@FullImageUrl" class="img-fluid rounded-4 shadow-sm" alt="@product.Nam_Pro" style="max-height: 400px; object-fit: contain;">
            </div>
            <div class="col-md-7 col-lg-6">
                <h3>@product.Nam_Pro</h3>
                <p class="text-muted fs-5">@product.Des_Pro</p>
                <h4 class="text-primary mt-3 mb-3">$@product.Pri_Pro.ToString("F2")</h4>

                <button class="btn btn-success btn-lg mt-3 px-5" @onclick="AddToCart">
                    <i class="bi bi-cart-plus-fill me-2"></i> Agregar al carrito
                </button>
            </div>
        </div>
    </div>
}


@code {
    [Parameter]
    public int Id { get; set; }

    private ProductDto product;
    private bool isLoading = true;
    private string FullImageUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        try
        {
            product = await Http.GetFromJsonAsync<ProductDto>($"api/Products/{Id}");

            if (product != null && !string.IsNullOrEmpty(product.Url_Pro))
            {
                var apiBaseAddress = Http.BaseAddress.ToString();
                apiBaseAddress = apiBaseAddress.TrimEnd('/');
                FullImageUrl = $"{apiBaseAddress}{product.Url_Pro}";
            }
        }
        catch (System.Net.Http.HttpRequestException ex) when (ex.StatusCode == System.Net.HttpStatusCode.NotFound)
        {
            product = null;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al obtener el producto: {ex.Message}");
            product = null;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task AddToCart()
    {
        if (product != null)
        {
            await cartService.AddToCartAsync(product);
            Navigation.NavigateTo("/cart");
        }
    }
}